{
  "stats": {
    "suites": 6,
    "tests": 5,
    "passes": 0,
    "pending": 0,
    "failures": 5,
    "start": "2023-10-06T01:44:49.118Z",
    "end": "2023-10-06T01:44:49.383Z",
    "duration": 265
  },
  "tests": [
    {
      "title": "returns the customerName",
      "fullTitle": "Fix the Scope declare customerName to be bob in global scope returns the customerName",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected 'JOHN' to equal 'bob'",
        "showDiff": true,
        "actual": "JOHN",
        "expected": "bob",
        "stack": "AssertionError: expected 'JOHN' to equal 'bob'\n    at Context.<anonymous> (test/indexTest.js:4:38)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    },
    {
      "title": "modifies the customerName variable",
      "fullTitle": "Fix the Scope upperCaseCustomerName() modifies the customerName variable",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'JOHN' to equal 'bob'",
        "showDiff": true,
        "actual": "JOHN",
        "expected": "bob",
        "stack": "AssertionError: expected 'JOHN' to equal 'bob'\n    at Context.<anonymous> (test/indexTest.js:10:38)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    },
    {
      "title": "setBestCustomer",
      "fullTitle": "Fix the Scope setBestCustomer() setBestCustomer",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'new best customer' to equal undefined",
        "showDiff": true,
        "actual": "new best customer",
        "stack": "AssertionError: expected 'new best customer' to equal undefined\n    at Context.<anonymous> (test/indexTest.js:19:38)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    },
    {
      "title": "overwrites the best customer",
      "fullTitle": "Fix the Scope overwriteBestCustomer() overwrites the best customer",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'new best customer' to equal 'maybe bob'",
        "showDiff": true,
        "actual": "new best customer",
        "expected": "maybe bob",
        "stack": "AssertionError: expected 'new best customer' to equal 'maybe bob'\n    at Context.<anonymous> (test/indexTest.js:31:38)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    },
    {
      "title": "unsuccessfully tries to reassign the least favorite customer",
      "fullTitle": "Fix the Scope changeLeastFavoriteCustomer() unsuccessfully tries to reassign the least favorite customer",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected [Function: changeLeastFavoriteCustomer] to throw an error",
        "showDiff": true,
        "expected": null,
        "stack": "AssertionError: expected [Function: changeLeastFavoriteCustomer] to throw an error\n    at Context.<anonymous> (test/indexTest.js:37:51)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "returns the customerName",
      "fullTitle": "Fix the Scope declare customerName to be bob in global scope returns the customerName",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected 'JOHN' to equal 'bob'",
        "showDiff": true,
        "actual": "JOHN",
        "expected": "bob",
        "stack": "AssertionError: expected 'JOHN' to equal 'bob'\n    at Context.<anonymous> (test/indexTest.js:4:38)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    },
    {
      "title": "modifies the customerName variable",
      "fullTitle": "Fix the Scope upperCaseCustomerName() modifies the customerName variable",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'JOHN' to equal 'bob'",
        "showDiff": true,
        "actual": "JOHN",
        "expected": "bob",
        "stack": "AssertionError: expected 'JOHN' to equal 'bob'\n    at Context.<anonymous> (test/indexTest.js:10:38)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    },
    {
      "title": "setBestCustomer",
      "fullTitle": "Fix the Scope setBestCustomer() setBestCustomer",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'new best customer' to equal undefined",
        "showDiff": true,
        "actual": "new best customer",
        "stack": "AssertionError: expected 'new best customer' to equal undefined\n    at Context.<anonymous> (test/indexTest.js:19:38)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    },
    {
      "title": "overwrites the best customer",
      "fullTitle": "Fix the Scope overwriteBestCustomer() overwrites the best customer",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'new best customer' to equal 'maybe bob'",
        "showDiff": true,
        "actual": "new best customer",
        "expected": "maybe bob",
        "stack": "AssertionError: expected 'new best customer' to equal 'maybe bob'\n    at Context.<anonymous> (test/indexTest.js:31:38)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    },
    {
      "title": "unsuccessfully tries to reassign the least favorite customer",
      "fullTitle": "Fix the Scope changeLeastFavoriteCustomer() unsuccessfully tries to reassign the least favorite customer",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected [Function: changeLeastFavoriteCustomer] to throw an error",
        "showDiff": true,
        "expected": null,
        "stack": "AssertionError: expected [Function: changeLeastFavoriteCustomer] to throw an error\n    at Context.<anonymous> (test/indexTest.js:37:51)\n    at process.processImmediate (node:internal/timers:478:21)"
      }
    }
  ],
  "passes": []
}